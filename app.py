# app.py — Auto-discover Quick Links from /pages and /src/pages
import os, re
import streamlit as st
from pathlib import Path

st.set_page_config(page_title="Vega Cockpit – Home", page_icon="🧭", layout="wide")
st.title("Vega Cockpit – Home")

st.success("Clean rebuild active. Quick Links are auto-detected from your /pages and /src/pages folders.")

def discover_pages():
    # Walk both roots and collect .py pages (non-private)
    roots = ["pages", "src/pages"]
    found = []
    for root in roots:
        if not os.path.isdir(root):
            continue
        for dirpath, _, filenames in os.walk(root):
            for name in filenames:
                if not name.endswith(".py"): 
                    continue
                if name.startswith("_"):
                    continue
                rel = os.path.join(dirpath, name).replace("\\", "/")
                found.append(rel)
    return found

def pretty_label(path: str) -> str:
    # Strip directory and extension
    base = os.path.basename(path).replace(".py", "")
    # Remove numeric prefixes like "10_" or "90-"
    base = re.sub(r'^[0-9]+[ _-]*', '', base)
    # Replace separators
    base = base.replace("_", " ").replace("-", " ")
    # Title case
    return base.strip().title()

# Build the list and de-dup by label (keep shortest path)
pages = discover_pages()
by_label = {}
for p in pages:
    label = pretty_label(p)
    if label.lower() in ("home", "app", "vega cockpit – home", "vega cockpit - home"):
        continue
    keep = by_label.get(label)
    if keep is None or len(p) < len(keep):
        by_label[label] = p

# Preferred order for some key items
preferred = [
    "Owners Daily Digest",
    "Us Stock Market",
    "Mexico Stock Market",
    "Canada Stock Market",
    "Risk Return Scoring",
    "Sector Momentum Tiles",
    "Defensive Overlay Status",
    "Sector Flip Alerts",
    "News Updates",
    "System Status",
]

ordered = []
# Put preferred first if present
for label in preferred:
    if label in by_label:
        ordered.append((label, by_label.pop(label)))
# Then append whatever else remains alphabetically
for label in sorted(by_label.keys()):
    ordered.append((label, by_label[label]))

st.markdown("### ⚡ Quick Links")
if not ordered:
    st.info("No linked pages detected. Place Streamlit pages under `pages/` or `src/pages/`.")
else:
    cols = st.columns(3)
    for i, (label, path) in enumerate(ordered):
        with cols[i % 3]:
            st.page_link(path, label=label, icon="➡️")

st.divider()
st.caption("Tip: Quick Links are generated by scanning `.py` files under `pages/` and `src/pages/`. "
           "Files starting with `_` are ignored. Numeric prefixes like `10_` are hidden in labels.")
